// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: repeated.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_repeated_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_repeated_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scalar.pb.h"
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_repeated_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_repeated_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_repeated_2eproto;
namespace test {
namespace pb {
class Repeated;
struct RepeatedDefaultTypeInternal;
extern RepeatedDefaultTypeInternal _Repeated_default_instance_;
}  // namespace pb
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::pb::Repeated* Arena::CreateMaybeMessage<::test::pb::Repeated>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {
namespace pb {

// ===================================================================

class Repeated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.Repeated) */ {
 public:
  inline Repeated() : Repeated(nullptr) {}
  ~Repeated() override;
  explicit constexpr Repeated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repeated(const Repeated& from);
  Repeated(Repeated&& from) noexcept
    : Repeated() {
    *this = ::std::move(from);
  }

  inline Repeated& operator=(const Repeated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repeated& operator=(Repeated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Repeated& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repeated* internal_default_instance() {
    return reinterpret_cast<const Repeated*>(
               &_Repeated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Repeated& a, Repeated& b) {
    a.Swap(&b);
  }
  inline void Swap(Repeated* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repeated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Repeated* New() const final {
    return new Repeated();
  }

  Repeated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Repeated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Repeated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Repeated& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repeated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.Repeated";
  }
  protected:
  explicit Repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarsFieldNumber = 1,
    kStringsFieldNumber = 2,
    kBzsFieldNumber = 3,
    kEnumsDefaultFieldNumber = 4,
    kEnumsUnpackedFieldNumber = 5,
    kEnumsPackedFieldNumber = 6,
    kU64SDefaultFieldNumber = 7,
    kU64SUnpackedFieldNumber = 8,
    kU64SPackedFieldNumber = 9,
  };
  // repeated .test.pb.Scalar scalars = 1;
  int scalars_size() const;
  private:
  int _internal_scalars_size() const;
  public:
  void clear_scalars();
  ::test::pb::Scalar* mutable_scalars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::pb::Scalar >*
      mutable_scalars();
  private:
  const ::test::pb::Scalar& _internal_scalars(int index) const;
  ::test::pb::Scalar* _internal_add_scalars();
  public:
  const ::test::pb::Scalar& scalars(int index) const;
  ::test::pb::Scalar* add_scalars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::pb::Scalar >&
      scalars() const;

  // repeated string strings = 2;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated bytes bzs = 3;
  int bzs_size() const;
  private:
  int _internal_bzs_size() const;
  public:
  void clear_bzs();
  const std::string& bzs(int index) const;
  std::string* mutable_bzs(int index);
  void set_bzs(int index, const std::string& value);
  void set_bzs(int index, std::string&& value);
  void set_bzs(int index, const char* value);
  void set_bzs(int index, const void* value, size_t size);
  std::string* add_bzs();
  void add_bzs(const std::string& value);
  void add_bzs(std::string&& value);
  void add_bzs(const char* value);
  void add_bzs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bzs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bzs();
  private:
  const std::string& _internal_bzs(int index) const;
  std::string* _internal_add_bzs();
  public:

  // repeated .test.pb.Enum enums_default = 4;
  int enums_default_size() const;
  private:
  int _internal_enums_default_size() const;
  public:
  void clear_enums_default();
  private:
  ::test::pb::Enum _internal_enums_default(int index) const;
  void _internal_add_enums_default(::test::pb::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enums_default();
  public:
  ::test::pb::Enum enums_default(int index) const;
  void set_enums_default(int index, ::test::pb::Enum value);
  void add_enums_default(::test::pb::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enums_default() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enums_default();

  // repeated .test.pb.Enum enums_unpacked = 5 [packed = false];
  int enums_unpacked_size() const;
  private:
  int _internal_enums_unpacked_size() const;
  public:
  void clear_enums_unpacked();
  private:
  ::test::pb::Enum _internal_enums_unpacked(int index) const;
  void _internal_add_enums_unpacked(::test::pb::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enums_unpacked();
  public:
  ::test::pb::Enum enums_unpacked(int index) const;
  void set_enums_unpacked(int index, ::test::pb::Enum value);
  void add_enums_unpacked(::test::pb::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enums_unpacked() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enums_unpacked();

  // repeated .test.pb.Enum enums_packed = 6 [packed = true];
  int enums_packed_size() const;
  private:
  int _internal_enums_packed_size() const;
  public:
  void clear_enums_packed();
  private:
  ::test::pb::Enum _internal_enums_packed(int index) const;
  void _internal_add_enums_packed(::test::pb::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enums_packed();
  public:
  ::test::pb::Enum enums_packed(int index) const;
  void set_enums_packed(int index, ::test::pb::Enum value);
  void add_enums_packed(::test::pb::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enums_packed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enums_packed();

  // repeated uint64 u64s_default = 7;
  int u64s_default_size() const;
  private:
  int _internal_u64s_default_size() const;
  public:
  void clear_u64s_default();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64s_default(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_u64s_default() const;
  void _internal_add_u64s_default(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_u64s_default();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 u64s_default(int index) const;
  void set_u64s_default(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_u64s_default(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      u64s_default() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_u64s_default();

  // repeated uint64 u64s_unpacked = 8 [packed = false];
  int u64s_unpacked_size() const;
  private:
  int _internal_u64s_unpacked_size() const;
  public:
  void clear_u64s_unpacked();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64s_unpacked(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_u64s_unpacked() const;
  void _internal_add_u64s_unpacked(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_u64s_unpacked();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 u64s_unpacked(int index) const;
  void set_u64s_unpacked(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_u64s_unpacked(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      u64s_unpacked() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_u64s_unpacked();

  // repeated uint64 u64s_packed = 9 [packed = true];
  int u64s_packed_size() const;
  private:
  int _internal_u64s_packed_size() const;
  public:
  void clear_u64s_packed();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64s_packed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_u64s_packed() const;
  void _internal_add_u64s_packed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_u64s_packed();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 u64s_packed(int index) const;
  void set_u64s_packed(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_u64s_packed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      u64s_packed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_u64s_packed();

  // @@protoc_insertion_point(class_scope:test.pb.Repeated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::pb::Scalar > scalars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bzs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enums_default_;
  mutable std::atomic<int> _enums_default_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enums_unpacked_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enums_packed_;
  mutable std::atomic<int> _enums_packed_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > u64s_default_;
  mutable std::atomic<int> _u64s_default_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > u64s_unpacked_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > u64s_packed_;
  mutable std::atomic<int> _u64s_packed_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repeated_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Repeated

// repeated .test.pb.Scalar scalars = 1;
inline int Repeated::_internal_scalars_size() const {
  return scalars_.size();
}
inline int Repeated::scalars_size() const {
  return _internal_scalars_size();
}
inline ::test::pb::Scalar* Repeated::mutable_scalars(int index) {
  // @@protoc_insertion_point(field_mutable:test.pb.Repeated.scalars)
  return scalars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::pb::Scalar >*
Repeated::mutable_scalars() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.scalars)
  return &scalars_;
}
inline const ::test::pb::Scalar& Repeated::_internal_scalars(int index) const {
  return scalars_.Get(index);
}
inline const ::test::pb::Scalar& Repeated::scalars(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.scalars)
  return _internal_scalars(index);
}
inline ::test::pb::Scalar* Repeated::_internal_add_scalars() {
  return scalars_.Add();
}
inline ::test::pb::Scalar* Repeated::add_scalars() {
  ::test::pb::Scalar* _add = _internal_add_scalars();
  // @@protoc_insertion_point(field_add:test.pb.Repeated.scalars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::pb::Scalar >&
Repeated::scalars() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.scalars)
  return scalars_;
}

// repeated string strings = 2;
inline int Repeated::_internal_strings_size() const {
  return strings_.size();
}
inline int Repeated::strings_size() const {
  return _internal_strings_size();
}
inline void Repeated::clear_strings() {
  strings_.Clear();
}
inline std::string* Repeated::add_strings() {
  std::string* _s = _internal_add_strings();
  // @@protoc_insertion_point(field_add_mutable:test.pb.Repeated.strings)
  return _s;
}
inline const std::string& Repeated::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& Repeated::strings(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.strings)
  return _internal_strings(index);
}
inline std::string* Repeated::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:test.pb.Repeated.strings)
  return strings_.Mutable(index);
}
inline void Repeated::set_strings(int index, const std::string& value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.strings)
}
inline void Repeated::set_strings(int index, std::string&& value) {
  strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.pb.Repeated.strings)
}
inline void Repeated::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.pb.Repeated.strings)
}
inline void Repeated::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.pb.Repeated.strings)
}
inline std::string* Repeated::_internal_add_strings() {
  return strings_.Add();
}
inline void Repeated::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.strings)
}
inline void Repeated::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.pb.Repeated.strings)
}
inline void Repeated::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.pb.Repeated.strings)
}
inline void Repeated::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.pb.Repeated.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Repeated::strings() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Repeated::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.strings)
  return &strings_;
}

// repeated bytes bzs = 3;
inline int Repeated::_internal_bzs_size() const {
  return bzs_.size();
}
inline int Repeated::bzs_size() const {
  return _internal_bzs_size();
}
inline void Repeated::clear_bzs() {
  bzs_.Clear();
}
inline std::string* Repeated::add_bzs() {
  std::string* _s = _internal_add_bzs();
  // @@protoc_insertion_point(field_add_mutable:test.pb.Repeated.bzs)
  return _s;
}
inline const std::string& Repeated::_internal_bzs(int index) const {
  return bzs_.Get(index);
}
inline const std::string& Repeated::bzs(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.bzs)
  return _internal_bzs(index);
}
inline std::string* Repeated::mutable_bzs(int index) {
  // @@protoc_insertion_point(field_mutable:test.pb.Repeated.bzs)
  return bzs_.Mutable(index);
}
inline void Repeated::set_bzs(int index, const std::string& value) {
  bzs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.bzs)
}
inline void Repeated::set_bzs(int index, std::string&& value) {
  bzs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.pb.Repeated.bzs)
}
inline void Repeated::set_bzs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bzs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.pb.Repeated.bzs)
}
inline void Repeated::set_bzs(int index, const void* value, size_t size) {
  bzs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.pb.Repeated.bzs)
}
inline std::string* Repeated::_internal_add_bzs() {
  return bzs_.Add();
}
inline void Repeated::add_bzs(const std::string& value) {
  bzs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.bzs)
}
inline void Repeated::add_bzs(std::string&& value) {
  bzs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.pb.Repeated.bzs)
}
inline void Repeated::add_bzs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bzs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.pb.Repeated.bzs)
}
inline void Repeated::add_bzs(const void* value, size_t size) {
  bzs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.pb.Repeated.bzs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Repeated::bzs() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.bzs)
  return bzs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Repeated::mutable_bzs() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.bzs)
  return &bzs_;
}

// repeated .test.pb.Enum enums_default = 4;
inline int Repeated::_internal_enums_default_size() const {
  return enums_default_.size();
}
inline int Repeated::enums_default_size() const {
  return _internal_enums_default_size();
}
inline void Repeated::clear_enums_default() {
  enums_default_.Clear();
}
inline ::test::pb::Enum Repeated::_internal_enums_default(int index) const {
  return static_cast< ::test::pb::Enum >(enums_default_.Get(index));
}
inline ::test::pb::Enum Repeated::enums_default(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.enums_default)
  return _internal_enums_default(index);
}
inline void Repeated::set_enums_default(int index, ::test::pb::Enum value) {
  enums_default_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.enums_default)
}
inline void Repeated::_internal_add_enums_default(::test::pb::Enum value) {
  enums_default_.Add(value);
}
inline void Repeated::add_enums_default(::test::pb::Enum value) {
  _internal_add_enums_default(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.enums_default)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Repeated::enums_default() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.enums_default)
  return enums_default_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::_internal_mutable_enums_default() {
  return &enums_default_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::mutable_enums_default() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.enums_default)
  return _internal_mutable_enums_default();
}

// repeated .test.pb.Enum enums_unpacked = 5 [packed = false];
inline int Repeated::_internal_enums_unpacked_size() const {
  return enums_unpacked_.size();
}
inline int Repeated::enums_unpacked_size() const {
  return _internal_enums_unpacked_size();
}
inline void Repeated::clear_enums_unpacked() {
  enums_unpacked_.Clear();
}
inline ::test::pb::Enum Repeated::_internal_enums_unpacked(int index) const {
  return static_cast< ::test::pb::Enum >(enums_unpacked_.Get(index));
}
inline ::test::pb::Enum Repeated::enums_unpacked(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.enums_unpacked)
  return _internal_enums_unpacked(index);
}
inline void Repeated::set_enums_unpacked(int index, ::test::pb::Enum value) {
  enums_unpacked_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.enums_unpacked)
}
inline void Repeated::_internal_add_enums_unpacked(::test::pb::Enum value) {
  enums_unpacked_.Add(value);
}
inline void Repeated::add_enums_unpacked(::test::pb::Enum value) {
  _internal_add_enums_unpacked(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.enums_unpacked)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Repeated::enums_unpacked() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.enums_unpacked)
  return enums_unpacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::_internal_mutable_enums_unpacked() {
  return &enums_unpacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::mutable_enums_unpacked() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.enums_unpacked)
  return _internal_mutable_enums_unpacked();
}

// repeated .test.pb.Enum enums_packed = 6 [packed = true];
inline int Repeated::_internal_enums_packed_size() const {
  return enums_packed_.size();
}
inline int Repeated::enums_packed_size() const {
  return _internal_enums_packed_size();
}
inline void Repeated::clear_enums_packed() {
  enums_packed_.Clear();
}
inline ::test::pb::Enum Repeated::_internal_enums_packed(int index) const {
  return static_cast< ::test::pb::Enum >(enums_packed_.Get(index));
}
inline ::test::pb::Enum Repeated::enums_packed(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.enums_packed)
  return _internal_enums_packed(index);
}
inline void Repeated::set_enums_packed(int index, ::test::pb::Enum value) {
  enums_packed_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.enums_packed)
}
inline void Repeated::_internal_add_enums_packed(::test::pb::Enum value) {
  enums_packed_.Add(value);
}
inline void Repeated::add_enums_packed(::test::pb::Enum value) {
  _internal_add_enums_packed(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.enums_packed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Repeated::enums_packed() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.enums_packed)
  return enums_packed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::_internal_mutable_enums_packed() {
  return &enums_packed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::mutable_enums_packed() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.enums_packed)
  return _internal_mutable_enums_packed();
}

// repeated uint64 u64s_default = 7;
inline int Repeated::_internal_u64s_default_size() const {
  return u64s_default_.size();
}
inline int Repeated::u64s_default_size() const {
  return _internal_u64s_default_size();
}
inline void Repeated::clear_u64s_default() {
  u64s_default_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::_internal_u64s_default(int index) const {
  return u64s_default_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::u64s_default(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.u64s_default)
  return _internal_u64s_default(index);
}
inline void Repeated::set_u64s_default(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_default_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.u64s_default)
}
inline void Repeated::_internal_add_u64s_default(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_default_.Add(value);
}
inline void Repeated::add_u64s_default(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_u64s_default(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.u64s_default)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::_internal_u64s_default() const {
  return u64s_default_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::u64s_default() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.u64s_default)
  return _internal_u64s_default();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::_internal_mutable_u64s_default() {
  return &u64s_default_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::mutable_u64s_default() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.u64s_default)
  return _internal_mutable_u64s_default();
}

// repeated uint64 u64s_unpacked = 8 [packed = false];
inline int Repeated::_internal_u64s_unpacked_size() const {
  return u64s_unpacked_.size();
}
inline int Repeated::u64s_unpacked_size() const {
  return _internal_u64s_unpacked_size();
}
inline void Repeated::clear_u64s_unpacked() {
  u64s_unpacked_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::_internal_u64s_unpacked(int index) const {
  return u64s_unpacked_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::u64s_unpacked(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.u64s_unpacked)
  return _internal_u64s_unpacked(index);
}
inline void Repeated::set_u64s_unpacked(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_unpacked_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.u64s_unpacked)
}
inline void Repeated::_internal_add_u64s_unpacked(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_unpacked_.Add(value);
}
inline void Repeated::add_u64s_unpacked(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_u64s_unpacked(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.u64s_unpacked)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::_internal_u64s_unpacked() const {
  return u64s_unpacked_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::u64s_unpacked() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.u64s_unpacked)
  return _internal_u64s_unpacked();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::_internal_mutable_u64s_unpacked() {
  return &u64s_unpacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::mutable_u64s_unpacked() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.u64s_unpacked)
  return _internal_mutable_u64s_unpacked();
}

// repeated uint64 u64s_packed = 9 [packed = true];
inline int Repeated::_internal_u64s_packed_size() const {
  return u64s_packed_.size();
}
inline int Repeated::u64s_packed_size() const {
  return _internal_u64s_packed_size();
}
inline void Repeated::clear_u64s_packed() {
  u64s_packed_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::_internal_u64s_packed(int index) const {
  return u64s_packed_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::u64s_packed(int index) const {
  // @@protoc_insertion_point(field_get:test.pb.Repeated.u64s_packed)
  return _internal_u64s_packed(index);
}
inline void Repeated::set_u64s_packed(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_packed_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.pb.Repeated.u64s_packed)
}
inline void Repeated::_internal_add_u64s_packed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64s_packed_.Add(value);
}
inline void Repeated::add_u64s_packed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_u64s_packed(value);
  // @@protoc_insertion_point(field_add:test.pb.Repeated.u64s_packed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::_internal_u64s_packed() const {
  return u64s_packed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::u64s_packed() const {
  // @@protoc_insertion_point(field_list:test.pb.Repeated.u64s_packed)
  return _internal_u64s_packed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::_internal_mutable_u64s_packed() {
  return &u64s_packed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::mutable_u64s_packed() {
  // @@protoc_insertion_point(field_mutable_list:test.pb.Repeated.u64s_packed)
  return _internal_mutable_u64s_packed();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_repeated_2eproto
