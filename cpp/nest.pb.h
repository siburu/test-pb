// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nest_2eproto;
namespace test {
namespace pb {
class GlobalA;
struct GlobalADefaultTypeInternal;
extern GlobalADefaultTypeInternal _GlobalA_default_instance_;
class GlobalA_NestedA;
struct GlobalA_NestedADefaultTypeInternal;
extern GlobalA_NestedADefaultTypeInternal _GlobalA_NestedA_default_instance_;
class GlobalB;
struct GlobalBDefaultTypeInternal;
extern GlobalBDefaultTypeInternal _GlobalB_default_instance_;
class GlobalB_NestedB;
struct GlobalB_NestedBDefaultTypeInternal;
extern GlobalB_NestedBDefaultTypeInternal _GlobalB_NestedB_default_instance_;
}  // namespace pb
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::pb::GlobalA* Arena::CreateMaybeMessage<::test::pb::GlobalA>(Arena*);
template<> ::test::pb::GlobalA_NestedA* Arena::CreateMaybeMessage<::test::pb::GlobalA_NestedA>(Arena*);
template<> ::test::pb::GlobalB* Arena::CreateMaybeMessage<::test::pb::GlobalB>(Arena*);
template<> ::test::pb::GlobalB_NestedB* Arena::CreateMaybeMessage<::test::pb::GlobalB_NestedB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {
namespace pb {

// ===================================================================

class GlobalA_NestedA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.GlobalA.NestedA) */ {
 public:
  inline GlobalA_NestedA() : GlobalA_NestedA(nullptr) {}
  ~GlobalA_NestedA() override;
  explicit constexpr GlobalA_NestedA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalA_NestedA(const GlobalA_NestedA& from);
  GlobalA_NestedA(GlobalA_NestedA&& from) noexcept
    : GlobalA_NestedA() {
    *this = ::std::move(from);
  }

  inline GlobalA_NestedA& operator=(const GlobalA_NestedA& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalA_NestedA& operator=(GlobalA_NestedA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalA_NestedA& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalA_NestedA* internal_default_instance() {
    return reinterpret_cast<const GlobalA_NestedA*>(
               &_GlobalA_NestedA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalA_NestedA& a, GlobalA_NestedA& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalA_NestedA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalA_NestedA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalA_NestedA* New() const final {
    return new GlobalA_NestedA();
  }

  GlobalA_NestedA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalA_NestedA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalA_NestedA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalA_NestedA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalA_NestedA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.GlobalA.NestedA";
  }
  protected:
  explicit GlobalA_NestedA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
  };
  // string s = 1;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_MUST_USE_RESULT std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:test.pb.GlobalA.NestedA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nest_2eproto;
};
// -------------------------------------------------------------------

class GlobalA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.GlobalA) */ {
 public:
  inline GlobalA() : GlobalA(nullptr) {}
  ~GlobalA() override;
  explicit constexpr GlobalA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalA(const GlobalA& from);
  GlobalA(GlobalA&& from) noexcept
    : GlobalA() {
    *this = ::std::move(from);
  }

  inline GlobalA& operator=(const GlobalA& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalA& operator=(GlobalA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalA& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalA* internal_default_instance() {
    return reinterpret_cast<const GlobalA*>(
               &_GlobalA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GlobalA& a, GlobalA& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalA* New() const final {
    return new GlobalA();
  }

  GlobalA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.GlobalA";
  }
  protected:
  explicit GlobalA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GlobalA_NestedA NestedA;

  // accessors -------------------------------------------------------

  enum : int {
    kNaFieldNumber = 1,
    kNbFieldNumber = 2,
  };
  // .test.pb.GlobalA.NestedA na = 1;
  bool has_na() const;
  private:
  bool _internal_has_na() const;
  public:
  void clear_na();
  const ::test::pb::GlobalA_NestedA& na() const;
  PROTOBUF_MUST_USE_RESULT ::test::pb::GlobalA_NestedA* release_na();
  ::test::pb::GlobalA_NestedA* mutable_na();
  void set_allocated_na(::test::pb::GlobalA_NestedA* na);
  private:
  const ::test::pb::GlobalA_NestedA& _internal_na() const;
  ::test::pb::GlobalA_NestedA* _internal_mutable_na();
  public:
  void unsafe_arena_set_allocated_na(
      ::test::pb::GlobalA_NestedA* na);
  ::test::pb::GlobalA_NestedA* unsafe_arena_release_na();

  // .test.pb.GlobalB.NestedB nb = 2;
  bool has_nb() const;
  private:
  bool _internal_has_nb() const;
  public:
  void clear_nb();
  const ::test::pb::GlobalB_NestedB& nb() const;
  PROTOBUF_MUST_USE_RESULT ::test::pb::GlobalB_NestedB* release_nb();
  ::test::pb::GlobalB_NestedB* mutable_nb();
  void set_allocated_nb(::test::pb::GlobalB_NestedB* nb);
  private:
  const ::test::pb::GlobalB_NestedB& _internal_nb() const;
  ::test::pb::GlobalB_NestedB* _internal_mutable_nb();
  public:
  void unsafe_arena_set_allocated_nb(
      ::test::pb::GlobalB_NestedB* nb);
  ::test::pb::GlobalB_NestedB* unsafe_arena_release_nb();

  // @@protoc_insertion_point(class_scope:test.pb.GlobalA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::test::pb::GlobalA_NestedA* na_;
  ::test::pb::GlobalB_NestedB* nb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nest_2eproto;
};
// -------------------------------------------------------------------

class GlobalB_NestedB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.GlobalB.NestedB) */ {
 public:
  inline GlobalB_NestedB() : GlobalB_NestedB(nullptr) {}
  ~GlobalB_NestedB() override;
  explicit constexpr GlobalB_NestedB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalB_NestedB(const GlobalB_NestedB& from);
  GlobalB_NestedB(GlobalB_NestedB&& from) noexcept
    : GlobalB_NestedB() {
    *this = ::std::move(from);
  }

  inline GlobalB_NestedB& operator=(const GlobalB_NestedB& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalB_NestedB& operator=(GlobalB_NestedB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalB_NestedB& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalB_NestedB* internal_default_instance() {
    return reinterpret_cast<const GlobalB_NestedB*>(
               &_GlobalB_NestedB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalB_NestedB& a, GlobalB_NestedB& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalB_NestedB* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalB_NestedB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalB_NestedB* New() const final {
    return new GlobalB_NestedB();
  }

  GlobalB_NestedB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalB_NestedB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalB_NestedB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalB_NestedB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalB_NestedB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.GlobalB.NestedB";
  }
  protected:
  explicit GlobalB_NestedB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
  };
  // string s = 1;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_MUST_USE_RESULT std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:test.pb.GlobalB.NestedB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nest_2eproto;
};
// -------------------------------------------------------------------

class GlobalB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.GlobalB) */ {
 public:
  inline GlobalB() : GlobalB(nullptr) {}
  ~GlobalB() override;
  explicit constexpr GlobalB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalB(const GlobalB& from);
  GlobalB(GlobalB&& from) noexcept
    : GlobalB() {
    *this = ::std::move(from);
  }

  inline GlobalB& operator=(const GlobalB& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalB& operator=(GlobalB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalB& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalB* internal_default_instance() {
    return reinterpret_cast<const GlobalB*>(
               &_GlobalB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GlobalB& a, GlobalB& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalB* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalB* New() const final {
    return new GlobalB();
  }

  GlobalB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.GlobalB";
  }
  protected:
  explicit GlobalB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GlobalB_NestedB NestedB;

  // accessors -------------------------------------------------------

  enum : int {
    kNbFieldNumber = 1,
    kNaFieldNumber = 2,
  };
  // .test.pb.GlobalB.NestedB nb = 1;
  bool has_nb() const;
  private:
  bool _internal_has_nb() const;
  public:
  void clear_nb();
  const ::test::pb::GlobalB_NestedB& nb() const;
  PROTOBUF_MUST_USE_RESULT ::test::pb::GlobalB_NestedB* release_nb();
  ::test::pb::GlobalB_NestedB* mutable_nb();
  void set_allocated_nb(::test::pb::GlobalB_NestedB* nb);
  private:
  const ::test::pb::GlobalB_NestedB& _internal_nb() const;
  ::test::pb::GlobalB_NestedB* _internal_mutable_nb();
  public:
  void unsafe_arena_set_allocated_nb(
      ::test::pb::GlobalB_NestedB* nb);
  ::test::pb::GlobalB_NestedB* unsafe_arena_release_nb();

  // .test.pb.GlobalA.NestedA na = 2;
  bool has_na() const;
  private:
  bool _internal_has_na() const;
  public:
  void clear_na();
  const ::test::pb::GlobalA_NestedA& na() const;
  PROTOBUF_MUST_USE_RESULT ::test::pb::GlobalA_NestedA* release_na();
  ::test::pb::GlobalA_NestedA* mutable_na();
  void set_allocated_na(::test::pb::GlobalA_NestedA* na);
  private:
  const ::test::pb::GlobalA_NestedA& _internal_na() const;
  ::test::pb::GlobalA_NestedA* _internal_mutable_na();
  public:
  void unsafe_arena_set_allocated_na(
      ::test::pb::GlobalA_NestedA* na);
  ::test::pb::GlobalA_NestedA* unsafe_arena_release_na();

  // @@protoc_insertion_point(class_scope:test.pb.GlobalB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::test::pb::GlobalB_NestedB* nb_;
  ::test::pb::GlobalA_NestedA* na_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalA_NestedA

// string s = 1;
inline void GlobalA_NestedA::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& GlobalA_NestedA::s() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalA.NestedA.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GlobalA_NestedA::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.pb.GlobalA.NestedA.s)
}
inline std::string* GlobalA_NestedA::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalA.NestedA.s)
  return _s;
}
inline const std::string& GlobalA_NestedA::_internal_s() const {
  return s_.Get();
}
inline void GlobalA_NestedA::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GlobalA_NestedA::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GlobalA_NestedA::release_s() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalA.NestedA.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GlobalA_NestedA::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalA.NestedA.s)
}

// -------------------------------------------------------------------

// GlobalA

// .test.pb.GlobalA.NestedA na = 1;
inline bool GlobalA::_internal_has_na() const {
  return this != internal_default_instance() && na_ != nullptr;
}
inline bool GlobalA::has_na() const {
  return _internal_has_na();
}
inline void GlobalA::clear_na() {
  if (GetArenaForAllocation() == nullptr && na_ != nullptr) {
    delete na_;
  }
  na_ = nullptr;
}
inline const ::test::pb::GlobalA_NestedA& GlobalA::_internal_na() const {
  const ::test::pb::GlobalA_NestedA* p = na_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::pb::GlobalA_NestedA&>(
      ::test::pb::_GlobalA_NestedA_default_instance_);
}
inline const ::test::pb::GlobalA_NestedA& GlobalA::na() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalA.na)
  return _internal_na();
}
inline void GlobalA::unsafe_arena_set_allocated_na(
    ::test::pb::GlobalA_NestedA* na) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_);
  }
  na_ = na;
  if (na) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.pb.GlobalA.na)
}
inline ::test::pb::GlobalA_NestedA* GlobalA::release_na() {
  
  ::test::pb::GlobalA_NestedA* temp = na_;
  na_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::pb::GlobalA_NestedA* GlobalA::unsafe_arena_release_na() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalA.na)
  
  ::test::pb::GlobalA_NestedA* temp = na_;
  na_ = nullptr;
  return temp;
}
inline ::test::pb::GlobalA_NestedA* GlobalA::_internal_mutable_na() {
  
  if (na_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::pb::GlobalA_NestedA>(GetArenaForAllocation());
    na_ = p;
  }
  return na_;
}
inline ::test::pb::GlobalA_NestedA* GlobalA::mutable_na() {
  ::test::pb::GlobalA_NestedA* _msg = _internal_mutable_na();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalA.na)
  return _msg;
}
inline void GlobalA::set_allocated_na(::test::pb::GlobalA_NestedA* na) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete na_;
  }
  if (na) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test::pb::GlobalA_NestedA>::GetOwningArena(na);
    if (message_arena != submessage_arena) {
      na = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na, submessage_arena);
    }
    
  } else {
    
  }
  na_ = na;
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalA.na)
}

// .test.pb.GlobalB.NestedB nb = 2;
inline bool GlobalA::_internal_has_nb() const {
  return this != internal_default_instance() && nb_ != nullptr;
}
inline bool GlobalA::has_nb() const {
  return _internal_has_nb();
}
inline void GlobalA::clear_nb() {
  if (GetArenaForAllocation() == nullptr && nb_ != nullptr) {
    delete nb_;
  }
  nb_ = nullptr;
}
inline const ::test::pb::GlobalB_NestedB& GlobalA::_internal_nb() const {
  const ::test::pb::GlobalB_NestedB* p = nb_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::pb::GlobalB_NestedB&>(
      ::test::pb::_GlobalB_NestedB_default_instance_);
}
inline const ::test::pb::GlobalB_NestedB& GlobalA::nb() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalA.nb)
  return _internal_nb();
}
inline void GlobalA::unsafe_arena_set_allocated_nb(
    ::test::pb::GlobalB_NestedB* nb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nb_);
  }
  nb_ = nb;
  if (nb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.pb.GlobalA.nb)
}
inline ::test::pb::GlobalB_NestedB* GlobalA::release_nb() {
  
  ::test::pb::GlobalB_NestedB* temp = nb_;
  nb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::pb::GlobalB_NestedB* GlobalA::unsafe_arena_release_nb() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalA.nb)
  
  ::test::pb::GlobalB_NestedB* temp = nb_;
  nb_ = nullptr;
  return temp;
}
inline ::test::pb::GlobalB_NestedB* GlobalA::_internal_mutable_nb() {
  
  if (nb_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::pb::GlobalB_NestedB>(GetArenaForAllocation());
    nb_ = p;
  }
  return nb_;
}
inline ::test::pb::GlobalB_NestedB* GlobalA::mutable_nb() {
  ::test::pb::GlobalB_NestedB* _msg = _internal_mutable_nb();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalA.nb)
  return _msg;
}
inline void GlobalA::set_allocated_nb(::test::pb::GlobalB_NestedB* nb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nb_;
  }
  if (nb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test::pb::GlobalB_NestedB>::GetOwningArena(nb);
    if (message_arena != submessage_arena) {
      nb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nb, submessage_arena);
    }
    
  } else {
    
  }
  nb_ = nb;
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalA.nb)
}

// -------------------------------------------------------------------

// GlobalB_NestedB

// string s = 1;
inline void GlobalB_NestedB::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& GlobalB_NestedB::s() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalB.NestedB.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GlobalB_NestedB::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.pb.GlobalB.NestedB.s)
}
inline std::string* GlobalB_NestedB::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalB.NestedB.s)
  return _s;
}
inline const std::string& GlobalB_NestedB::_internal_s() const {
  return s_.Get();
}
inline void GlobalB_NestedB::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GlobalB_NestedB::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GlobalB_NestedB::release_s() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalB.NestedB.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GlobalB_NestedB::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalB.NestedB.s)
}

// -------------------------------------------------------------------

// GlobalB

// .test.pb.GlobalB.NestedB nb = 1;
inline bool GlobalB::_internal_has_nb() const {
  return this != internal_default_instance() && nb_ != nullptr;
}
inline bool GlobalB::has_nb() const {
  return _internal_has_nb();
}
inline void GlobalB::clear_nb() {
  if (GetArenaForAllocation() == nullptr && nb_ != nullptr) {
    delete nb_;
  }
  nb_ = nullptr;
}
inline const ::test::pb::GlobalB_NestedB& GlobalB::_internal_nb() const {
  const ::test::pb::GlobalB_NestedB* p = nb_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::pb::GlobalB_NestedB&>(
      ::test::pb::_GlobalB_NestedB_default_instance_);
}
inline const ::test::pb::GlobalB_NestedB& GlobalB::nb() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalB.nb)
  return _internal_nb();
}
inline void GlobalB::unsafe_arena_set_allocated_nb(
    ::test::pb::GlobalB_NestedB* nb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nb_);
  }
  nb_ = nb;
  if (nb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.pb.GlobalB.nb)
}
inline ::test::pb::GlobalB_NestedB* GlobalB::release_nb() {
  
  ::test::pb::GlobalB_NestedB* temp = nb_;
  nb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::pb::GlobalB_NestedB* GlobalB::unsafe_arena_release_nb() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalB.nb)
  
  ::test::pb::GlobalB_NestedB* temp = nb_;
  nb_ = nullptr;
  return temp;
}
inline ::test::pb::GlobalB_NestedB* GlobalB::_internal_mutable_nb() {
  
  if (nb_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::pb::GlobalB_NestedB>(GetArenaForAllocation());
    nb_ = p;
  }
  return nb_;
}
inline ::test::pb::GlobalB_NestedB* GlobalB::mutable_nb() {
  ::test::pb::GlobalB_NestedB* _msg = _internal_mutable_nb();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalB.nb)
  return _msg;
}
inline void GlobalB::set_allocated_nb(::test::pb::GlobalB_NestedB* nb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nb_;
  }
  if (nb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test::pb::GlobalB_NestedB>::GetOwningArena(nb);
    if (message_arena != submessage_arena) {
      nb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nb, submessage_arena);
    }
    
  } else {
    
  }
  nb_ = nb;
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalB.nb)
}

// .test.pb.GlobalA.NestedA na = 2;
inline bool GlobalB::_internal_has_na() const {
  return this != internal_default_instance() && na_ != nullptr;
}
inline bool GlobalB::has_na() const {
  return _internal_has_na();
}
inline void GlobalB::clear_na() {
  if (GetArenaForAllocation() == nullptr && na_ != nullptr) {
    delete na_;
  }
  na_ = nullptr;
}
inline const ::test::pb::GlobalA_NestedA& GlobalB::_internal_na() const {
  const ::test::pb::GlobalA_NestedA* p = na_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::pb::GlobalA_NestedA&>(
      ::test::pb::_GlobalA_NestedA_default_instance_);
}
inline const ::test::pb::GlobalA_NestedA& GlobalB::na() const {
  // @@protoc_insertion_point(field_get:test.pb.GlobalB.na)
  return _internal_na();
}
inline void GlobalB::unsafe_arena_set_allocated_na(
    ::test::pb::GlobalA_NestedA* na) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_);
  }
  na_ = na;
  if (na) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.pb.GlobalB.na)
}
inline ::test::pb::GlobalA_NestedA* GlobalB::release_na() {
  
  ::test::pb::GlobalA_NestedA* temp = na_;
  na_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::pb::GlobalA_NestedA* GlobalB::unsafe_arena_release_na() {
  // @@protoc_insertion_point(field_release:test.pb.GlobalB.na)
  
  ::test::pb::GlobalA_NestedA* temp = na_;
  na_ = nullptr;
  return temp;
}
inline ::test::pb::GlobalA_NestedA* GlobalB::_internal_mutable_na() {
  
  if (na_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::pb::GlobalA_NestedA>(GetArenaForAllocation());
    na_ = p;
  }
  return na_;
}
inline ::test::pb::GlobalA_NestedA* GlobalB::mutable_na() {
  ::test::pb::GlobalA_NestedA* _msg = _internal_mutable_na();
  // @@protoc_insertion_point(field_mutable:test.pb.GlobalB.na)
  return _msg;
}
inline void GlobalB::set_allocated_na(::test::pb::GlobalA_NestedA* na) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete na_;
  }
  if (na) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test::pb::GlobalA_NestedA>::GetOwningArena(na);
    if (message_arena != submessage_arena) {
      na = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na, submessage_arena);
    }
    
  } else {
    
  }
  na_ = na;
  // @@protoc_insertion_point(field_set_allocated:test.pb.GlobalB.na)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nest_2eproto
