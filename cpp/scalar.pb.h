// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scalar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scalar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scalar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scalar_2eproto;
namespace test {
namespace pb {
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
}  // namespace pb
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::pb::Scalar* Arena::CreateMaybeMessage<::test::pb::Scalar>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {
namespace pb {

// ===================================================================

class Scalar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.pb.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  ~Scalar() override;
  explicit constexpr Scalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar* New() const final {
    return new Scalar();
  }

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scalar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Scalar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.pb.Scalar";
  }
  protected:
  explicit Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 14,
    kBzFieldNumber = 15,
    kDFieldNumber = 1,
    kFFieldNumber = 2,
    kI32FieldNumber = 3,
    kI64FieldNumber = 4,
    kU64FieldNumber = 6,
    kU32FieldNumber = 5,
    kS32FieldNumber = 7,
    kS64FieldNumber = 8,
    kF64FieldNumber = 10,
    kF32FieldNumber = 9,
    kSf32FieldNumber = 11,
    kSf64FieldNumber = 12,
    kBFieldNumber = 13,
  };
  // string s = 14;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_MUST_USE_RESULT std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // bytes bz = 15;
  void clear_bz();
  const std::string& bz() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bz(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bz();
  PROTOBUF_MUST_USE_RESULT std::string* release_bz();
  void set_allocated_bz(std::string* bz);
  private:
  const std::string& _internal_bz() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bz(const std::string& value);
  std::string* _internal_mutable_bz();
  public:

  // double d = 1;
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // float f = 2;
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // int32 i32 = 3;
  void clear_i32();
  ::PROTOBUF_NAMESPACE_ID::int32 i32() const;
  void set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32() const;
  void _internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 i64 = 4;
  void clear_i64();
  ::PROTOBUF_NAMESPACE_ID::int64 i64() const;
  void set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64() const;
  void _internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 u64 = 6;
  void clear_u64();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64() const;
  void set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64() const;
  void _internal_set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 u32 = 5;
  void clear_u32();
  ::PROTOBUF_NAMESPACE_ID::uint32 u32() const;
  void set_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u32() const;
  void _internal_set_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 s32 = 7;
  void clear_s32();
  ::PROTOBUF_NAMESPACE_ID::int32 s32() const;
  void set_s32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s32() const;
  void _internal_set_s32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 s64 = 8;
  void clear_s64();
  ::PROTOBUF_NAMESPACE_ID::int64 s64() const;
  void set_s64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s64() const;
  void _internal_set_s64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed64 f64 = 10;
  void clear_f64();
  ::PROTOBUF_NAMESPACE_ID::uint64 f64() const;
  void set_f64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f64() const;
  void _internal_set_f64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed32 f32 = 9;
  void clear_f32();
  ::PROTOBUF_NAMESPACE_ID::uint32 f32() const;
  void set_f32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f32() const;
  void _internal_set_f32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sfixed32 sf32 = 11;
  void clear_sf32();
  ::PROTOBUF_NAMESPACE_ID::int32 sf32() const;
  void set_sf32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sf32() const;
  void _internal_set_sf32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sf64 = 12;
  void clear_sf64();
  ::PROTOBUF_NAMESPACE_ID::int64 sf64() const;
  void set_sf64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sf64() const;
  void _internal_set_sf64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool b = 13;
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // @@protoc_insertion_point(class_scope:test.pb.Scalar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bz_;
  double d_;
  float f_;
  ::PROTOBUF_NAMESPACE_ID::int32 i32_;
  ::PROTOBUF_NAMESPACE_ID::int64 i64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u32_;
  ::PROTOBUF_NAMESPACE_ID::int32 s32_;
  ::PROTOBUF_NAMESPACE_ID::int64 s64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f32_;
  ::PROTOBUF_NAMESPACE_ID::int32 sf32_;
  ::PROTOBUF_NAMESPACE_ID::int64 sf64_;
  bool b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scalar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scalar

// double d = 1;
inline void Scalar::clear_d() {
  d_ = 0;
}
inline double Scalar::_internal_d() const {
  return d_;
}
inline double Scalar::d() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.d)
  return _internal_d();
}
inline void Scalar::_internal_set_d(double value) {
  
  d_ = value;
}
inline void Scalar::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.d)
}

// float f = 2;
inline void Scalar::clear_f() {
  f_ = 0;
}
inline float Scalar::_internal_f() const {
  return f_;
}
inline float Scalar::f() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.f)
  return _internal_f();
}
inline void Scalar::_internal_set_f(float value) {
  
  f_ = value;
}
inline void Scalar::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.f)
}

// int32 i32 = 3;
inline void Scalar::clear_i32() {
  i32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::_internal_i32() const {
  return i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::i32() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.i32)
  return _internal_i32();
}
inline void Scalar::_internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  i32_ = value;
}
inline void Scalar::set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.i32)
}

// int64 i64 = 4;
inline void Scalar::clear_i64() {
  i64_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::_internal_i64() const {
  return i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::i64() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.i64)
  return _internal_i64();
}
inline void Scalar::_internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  i64_ = value;
}
inline void Scalar::set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.i64)
}

// uint32 u32 = 5;
inline void Scalar::clear_u32() {
  u32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Scalar::_internal_u32() const {
  return u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Scalar::u32() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.u32)
  return _internal_u32();
}
inline void Scalar::_internal_set_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u32_ = value;
}
inline void Scalar::set_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.u32)
}

// uint64 u64 = 6;
inline void Scalar::clear_u64() {
  u64_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scalar::_internal_u64() const {
  return u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scalar::u64() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.u64)
  return _internal_u64();
}
inline void Scalar::_internal_set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64_ = value;
}
inline void Scalar::set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.u64)
}

// sint32 s32 = 7;
inline void Scalar::clear_s32() {
  s32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::_internal_s32() const {
  return s32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::s32() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.s32)
  return _internal_s32();
}
inline void Scalar::_internal_set_s32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s32_ = value;
}
inline void Scalar::set_s32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s32(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.s32)
}

// sint64 s64 = 8;
inline void Scalar::clear_s64() {
  s64_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::_internal_s64() const {
  return s64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::s64() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.s64)
  return _internal_s64();
}
inline void Scalar::_internal_set_s64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s64_ = value;
}
inline void Scalar::set_s64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s64(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.s64)
}

// fixed32 f32 = 9;
inline void Scalar::clear_f32() {
  f32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Scalar::_internal_f32() const {
  return f32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Scalar::f32() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.f32)
  return _internal_f32();
}
inline void Scalar::_internal_set_f32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  f32_ = value;
}
inline void Scalar::set_f32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.f32)
}

// fixed64 f64 = 10;
inline void Scalar::clear_f64() {
  f64_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scalar::_internal_f64() const {
  return f64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scalar::f64() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.f64)
  return _internal_f64();
}
inline void Scalar::_internal_set_f64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  f64_ = value;
}
inline void Scalar::set_f64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f64(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.f64)
}

// sfixed32 sf32 = 11;
inline void Scalar::clear_sf32() {
  sf32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::_internal_sf32() const {
  return sf32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::sf32() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.sf32)
  return _internal_sf32();
}
inline void Scalar::_internal_set_sf32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sf32_ = value;
}
inline void Scalar::set_sf32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sf32(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.sf32)
}

// sfixed64 sf64 = 12;
inline void Scalar::clear_sf64() {
  sf64_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::_internal_sf64() const {
  return sf64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::sf64() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.sf64)
  return _internal_sf64();
}
inline void Scalar::_internal_set_sf64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sf64_ = value;
}
inline void Scalar::set_sf64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sf64(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.sf64)
}

// bool b = 13;
inline void Scalar::clear_b() {
  b_ = false;
}
inline bool Scalar::_internal_b() const {
  return b_;
}
inline bool Scalar::b() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.b)
  return _internal_b();
}
inline void Scalar::_internal_set_b(bool value) {
  
  b_ = value;
}
inline void Scalar::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:test.pb.Scalar.b)
}

// string s = 14;
inline void Scalar::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& Scalar::s() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scalar::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.pb.Scalar.s)
}
inline std::string* Scalar::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:test.pb.Scalar.s)
  return _s;
}
inline const std::string& Scalar::_internal_s() const {
  return s_.Get();
}
inline void Scalar::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Scalar::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Scalar::release_s() {
  // @@protoc_insertion_point(field_release:test.pb.Scalar.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Scalar::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.pb.Scalar.s)
}

// bytes bz = 15;
inline void Scalar::clear_bz() {
  bz_.ClearToEmpty();
}
inline const std::string& Scalar::bz() const {
  // @@protoc_insertion_point(field_get:test.pb.Scalar.bz)
  return _internal_bz();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scalar::set_bz(ArgT0&& arg0, ArgT... args) {
 
 bz_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.pb.Scalar.bz)
}
inline std::string* Scalar::mutable_bz() {
  std::string* _s = _internal_mutable_bz();
  // @@protoc_insertion_point(field_mutable:test.pb.Scalar.bz)
  return _s;
}
inline const std::string& Scalar::_internal_bz() const {
  return bz_.Get();
}
inline void Scalar::_internal_set_bz(const std::string& value) {
  
  bz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Scalar::_internal_mutable_bz() {
  
  return bz_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Scalar::release_bz() {
  // @@protoc_insertion_point(field_release:test.pb.Scalar.bz)
  return bz_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Scalar::set_allocated_bz(std::string* bz) {
  if (bz != nullptr) {
    
  } else {
    
  }
  bz_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bz,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.pb.Scalar.bz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto
