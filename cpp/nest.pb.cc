// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nest.proto

#include "nest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace test {
namespace pb {
constexpr GlobalA_NestedA::GlobalA_NestedA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GlobalA_NestedADefaultTypeInternal {
  constexpr GlobalA_NestedADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalA_NestedADefaultTypeInternal() {}
  union {
    GlobalA_NestedA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalA_NestedADefaultTypeInternal _GlobalA_NestedA_default_instance_;
constexpr GlobalA::GlobalA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : na_(nullptr)
  , nb_(nullptr){}
struct GlobalADefaultTypeInternal {
  constexpr GlobalADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalADefaultTypeInternal() {}
  union {
    GlobalA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalADefaultTypeInternal _GlobalA_default_instance_;
constexpr GlobalB_NestedB::GlobalB_NestedB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GlobalB_NestedBDefaultTypeInternal {
  constexpr GlobalB_NestedBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalB_NestedBDefaultTypeInternal() {}
  union {
    GlobalB_NestedB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalB_NestedBDefaultTypeInternal _GlobalB_NestedB_default_instance_;
constexpr GlobalB::GlobalB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nb_(nullptr)
  , na_(nullptr){}
struct GlobalBDefaultTypeInternal {
  constexpr GlobalBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalBDefaultTypeInternal() {}
  union {
    GlobalB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalBDefaultTypeInternal _GlobalB_default_instance_;
}  // namespace pb
}  // namespace test
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nest_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalA_NestedA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalA_NestedA, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalA, na_),
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalA, nb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalB_NestedB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalB_NestedB, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalB, nb_),
  PROTOBUF_FIELD_OFFSET(::test::pb::GlobalB, na_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::pb::GlobalA_NestedA)},
  { 6, -1, sizeof(::test::pb::GlobalA)},
  { 13, -1, sizeof(::test::pb::GlobalB_NestedB)},
  { 19, -1, sizeof(::test::pb::GlobalB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::pb::_GlobalA_NestedA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::pb::_GlobalA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::pb::_GlobalB_NestedB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::pb::_GlobalB_default_instance_),
};

const char descriptor_table_protodef_nest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnest.proto\022\007test.pb\"k\n\007GlobalA\022$\n\002na\030\001"
  " \001(\0132\030.test.pb.GlobalA.NestedA\022$\n\002nb\030\002 \001"
  "(\0132\030.test.pb.GlobalB.NestedB\032\024\n\007NestedA\022"
  "\t\n\001s\030\001 \001(\t\"k\n\007GlobalB\022$\n\002nb\030\001 \001(\0132\030.test"
  ".pb.GlobalB.NestedB\022$\n\002na\030\002 \001(\0132\030.test.p"
  "b.GlobalA.NestedA\032\024\n\007NestedB\022\t\n\001s\030\001 \001(\tb"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nest_2eproto = {
  false, false, 247, descriptor_table_protodef_nest_2eproto, "nest.proto", 
  &descriptor_table_nest_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_nest_2eproto::offsets,
  file_level_metadata_nest_2eproto, file_level_enum_descriptors_nest_2eproto, file_level_service_descriptors_nest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_nest_2eproto_getter() {
  return &descriptor_table_nest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_nest_2eproto(&descriptor_table_nest_2eproto);
namespace test {
namespace pb {

// ===================================================================

class GlobalA_NestedA::_Internal {
 public:
};

GlobalA_NestedA::GlobalA_NestedA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test.pb.GlobalA.NestedA)
}
GlobalA_NestedA::GlobalA_NestedA(const GlobalA_NestedA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test.pb.GlobalA.NestedA)
}

inline void GlobalA_NestedA::SharedCtor() {
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GlobalA_NestedA::~GlobalA_NestedA() {
  // @@protoc_insertion_point(destructor:test.pb.GlobalA.NestedA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalA_NestedA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GlobalA_NestedA::ArenaDtor(void* object) {
  GlobalA_NestedA* _this = reinterpret_cast< GlobalA_NestedA* >(object);
  (void)_this;
}
void GlobalA_NestedA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalA_NestedA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalA_NestedA::Clear() {
// @@protoc_insertion_point(message_clear_start:test.pb.GlobalA.NestedA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalA_NestedA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.pb.GlobalA.NestedA.s"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalA_NestedA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.pb.GlobalA.NestedA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.pb.GlobalA.NestedA.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.pb.GlobalA.NestedA)
  return target;
}

size_t GlobalA_NestedA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.pb.GlobalA.NestedA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalA_NestedA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalA_NestedA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalA_NestedA::GetClassData() const { return &_class_data_; }

void GlobalA_NestedA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalA_NestedA *>(to)->MergeFrom(
      static_cast<const GlobalA_NestedA &>(from));
}


void GlobalA_NestedA::MergeFrom(const GlobalA_NestedA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.pb.GlobalA.NestedA)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalA_NestedA::CopyFrom(const GlobalA_NestedA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.pb.GlobalA.NestedA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalA_NestedA::IsInitialized() const {
  return true;
}

void GlobalA_NestedA::InternalSwap(GlobalA_NestedA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, GetArenaForAllocation(),
      &other->s_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalA_NestedA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nest_2eproto_getter, &descriptor_table_nest_2eproto_once,
      file_level_metadata_nest_2eproto[0]);
}

// ===================================================================

class GlobalA::_Internal {
 public:
  static const ::test::pb::GlobalA_NestedA& na(const GlobalA* msg);
  static const ::test::pb::GlobalB_NestedB& nb(const GlobalA* msg);
};

const ::test::pb::GlobalA_NestedA&
GlobalA::_Internal::na(const GlobalA* msg) {
  return *msg->na_;
}
const ::test::pb::GlobalB_NestedB&
GlobalA::_Internal::nb(const GlobalA* msg) {
  return *msg->nb_;
}
GlobalA::GlobalA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test.pb.GlobalA)
}
GlobalA::GlobalA(const GlobalA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_na()) {
    na_ = new ::test::pb::GlobalA_NestedA(*from.na_);
  } else {
    na_ = nullptr;
  }
  if (from._internal_has_nb()) {
    nb_ = new ::test::pb::GlobalB_NestedB(*from.nb_);
  } else {
    nb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:test.pb.GlobalA)
}

inline void GlobalA::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&na_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nb_) -
    reinterpret_cast<char*>(&na_)) + sizeof(nb_));
}

GlobalA::~GlobalA() {
  // @@protoc_insertion_point(destructor:test.pb.GlobalA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete na_;
  if (this != internal_default_instance()) delete nb_;
}

void GlobalA::ArenaDtor(void* object) {
  GlobalA* _this = reinterpret_cast< GlobalA* >(object);
  (void)_this;
}
void GlobalA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalA::Clear() {
// @@protoc_insertion_point(message_clear_start:test.pb.GlobalA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && na_ != nullptr) {
    delete na_;
  }
  na_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nb_ != nullptr) {
    delete nb_;
  }
  nb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .test.pb.GlobalA.NestedA na = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_na(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test.pb.GlobalB.NestedB nb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.pb.GlobalA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .test.pb.GlobalA.NestedA na = 1;
  if (this->_internal_has_na()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::na(this), target, stream);
  }

  // .test.pb.GlobalB.NestedB nb = 2;
  if (this->_internal_has_nb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.pb.GlobalA)
  return target;
}

size_t GlobalA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.pb.GlobalA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .test.pb.GlobalA.NestedA na = 1;
  if (this->_internal_has_na()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_);
  }

  // .test.pb.GlobalB.NestedB nb = 2;
  if (this->_internal_has_nb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nb_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalA::GetClassData() const { return &_class_data_; }

void GlobalA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalA *>(to)->MergeFrom(
      static_cast<const GlobalA &>(from));
}


void GlobalA::MergeFrom(const GlobalA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.pb.GlobalA)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_na()) {
    _internal_mutable_na()->::test::pb::GlobalA_NestedA::MergeFrom(from._internal_na());
  }
  if (from._internal_has_nb()) {
    _internal_mutable_nb()->::test::pb::GlobalB_NestedB::MergeFrom(from._internal_nb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalA::CopyFrom(const GlobalA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.pb.GlobalA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalA::IsInitialized() const {
  return true;
}

void GlobalA::InternalSwap(GlobalA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalA, nb_)
      + sizeof(GlobalA::nb_)
      - PROTOBUF_FIELD_OFFSET(GlobalA, na_)>(
          reinterpret_cast<char*>(&na_),
          reinterpret_cast<char*>(&other->na_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nest_2eproto_getter, &descriptor_table_nest_2eproto_once,
      file_level_metadata_nest_2eproto[1]);
}

// ===================================================================

class GlobalB_NestedB::_Internal {
 public:
};

GlobalB_NestedB::GlobalB_NestedB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test.pb.GlobalB.NestedB)
}
GlobalB_NestedB::GlobalB_NestedB(const GlobalB_NestedB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test.pb.GlobalB.NestedB)
}

inline void GlobalB_NestedB::SharedCtor() {
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GlobalB_NestedB::~GlobalB_NestedB() {
  // @@protoc_insertion_point(destructor:test.pb.GlobalB.NestedB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalB_NestedB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GlobalB_NestedB::ArenaDtor(void* object) {
  GlobalB_NestedB* _this = reinterpret_cast< GlobalB_NestedB* >(object);
  (void)_this;
}
void GlobalB_NestedB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalB_NestedB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalB_NestedB::Clear() {
// @@protoc_insertion_point(message_clear_start:test.pb.GlobalB.NestedB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalB_NestedB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.pb.GlobalB.NestedB.s"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalB_NestedB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.pb.GlobalB.NestedB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.pb.GlobalB.NestedB.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.pb.GlobalB.NestedB)
  return target;
}

size_t GlobalB_NestedB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.pb.GlobalB.NestedB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalB_NestedB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalB_NestedB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalB_NestedB::GetClassData() const { return &_class_data_; }

void GlobalB_NestedB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalB_NestedB *>(to)->MergeFrom(
      static_cast<const GlobalB_NestedB &>(from));
}


void GlobalB_NestedB::MergeFrom(const GlobalB_NestedB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.pb.GlobalB.NestedB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalB_NestedB::CopyFrom(const GlobalB_NestedB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.pb.GlobalB.NestedB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalB_NestedB::IsInitialized() const {
  return true;
}

void GlobalB_NestedB::InternalSwap(GlobalB_NestedB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, GetArenaForAllocation(),
      &other->s_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalB_NestedB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nest_2eproto_getter, &descriptor_table_nest_2eproto_once,
      file_level_metadata_nest_2eproto[2]);
}

// ===================================================================

class GlobalB::_Internal {
 public:
  static const ::test::pb::GlobalB_NestedB& nb(const GlobalB* msg);
  static const ::test::pb::GlobalA_NestedA& na(const GlobalB* msg);
};

const ::test::pb::GlobalB_NestedB&
GlobalB::_Internal::nb(const GlobalB* msg) {
  return *msg->nb_;
}
const ::test::pb::GlobalA_NestedA&
GlobalB::_Internal::na(const GlobalB* msg) {
  return *msg->na_;
}
GlobalB::GlobalB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test.pb.GlobalB)
}
GlobalB::GlobalB(const GlobalB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nb()) {
    nb_ = new ::test::pb::GlobalB_NestedB(*from.nb_);
  } else {
    nb_ = nullptr;
  }
  if (from._internal_has_na()) {
    na_ = new ::test::pb::GlobalA_NestedA(*from.na_);
  } else {
    na_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:test.pb.GlobalB)
}

inline void GlobalB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&na_) -
    reinterpret_cast<char*>(&nb_)) + sizeof(na_));
}

GlobalB::~GlobalB() {
  // @@protoc_insertion_point(destructor:test.pb.GlobalB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nb_;
  if (this != internal_default_instance()) delete na_;
}

void GlobalB::ArenaDtor(void* object) {
  GlobalB* _this = reinterpret_cast< GlobalB* >(object);
  (void)_this;
}
void GlobalB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalB::Clear() {
// @@protoc_insertion_point(message_clear_start:test.pb.GlobalB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nb_ != nullptr) {
    delete nb_;
  }
  nb_ = nullptr;
  if (GetArenaForAllocation() == nullptr && na_ != nullptr) {
    delete na_;
  }
  na_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .test.pb.GlobalB.NestedB nb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test.pb.GlobalA.NestedA na = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_na(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.pb.GlobalB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .test.pb.GlobalB.NestedB nb = 1;
  if (this->_internal_has_nb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nb(this), target, stream);
  }

  // .test.pb.GlobalA.NestedA na = 2;
  if (this->_internal_has_na()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::na(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.pb.GlobalB)
  return target;
}

size_t GlobalB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.pb.GlobalB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .test.pb.GlobalB.NestedB nb = 1;
  if (this->_internal_has_nb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nb_);
  }

  // .test.pb.GlobalA.NestedA na = 2;
  if (this->_internal_has_na()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *na_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalB::GetClassData() const { return &_class_data_; }

void GlobalB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalB *>(to)->MergeFrom(
      static_cast<const GlobalB &>(from));
}


void GlobalB::MergeFrom(const GlobalB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.pb.GlobalB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nb()) {
    _internal_mutable_nb()->::test::pb::GlobalB_NestedB::MergeFrom(from._internal_nb());
  }
  if (from._internal_has_na()) {
    _internal_mutable_na()->::test::pb::GlobalA_NestedA::MergeFrom(from._internal_na());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalB::CopyFrom(const GlobalB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.pb.GlobalB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalB::IsInitialized() const {
  return true;
}

void GlobalB::InternalSwap(GlobalB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalB, na_)
      + sizeof(GlobalB::na_)
      - PROTOBUF_FIELD_OFFSET(GlobalB, nb_)>(
          reinterpret_cast<char*>(&nb_),
          reinterpret_cast<char*>(&other->nb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nest_2eproto_getter, &descriptor_table_nest_2eproto_once,
      file_level_metadata_nest_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::pb::GlobalA_NestedA* Arena::CreateMaybeMessage< ::test::pb::GlobalA_NestedA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::pb::GlobalA_NestedA >(arena);
}
template<> PROTOBUF_NOINLINE ::test::pb::GlobalA* Arena::CreateMaybeMessage< ::test::pb::GlobalA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::pb::GlobalA >(arena);
}
template<> PROTOBUF_NOINLINE ::test::pb::GlobalB_NestedB* Arena::CreateMaybeMessage< ::test::pb::GlobalB_NestedB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::pb::GlobalB_NestedB >(arena);
}
template<> PROTOBUF_NOINLINE ::test::pb::GlobalB* Arena::CreateMaybeMessage< ::test::pb::GlobalB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::pb::GlobalB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
